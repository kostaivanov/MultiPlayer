//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerGround"",
            ""id"": ""4f92d461-926a-4c23-b433-262350b60c0f"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8b55babb-db2d-4351-bf1a-daeeb258b623"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""dd6d44d8-b60f-4e26-990c-8f41652d1998"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f81e9359-2fd9-4714-87b8-a7f9e8c11805"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f85fed92-3658-4526-bc0e-1fd578b903f1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a530ad30-ed79-4140-ab50-a5d6de172a9c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""55a30e30-6d95-4a4c-87a9-70cee2caf17e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerWater"",
            ""id"": ""afc7d8aa-c309-4a7e-9faa-def25a986495"",
            ""actions"": [
                {
                    ""name"": ""Swimming"",
                    ""type"": ""Value"",
                    ""id"": ""7cd6d755-75a1-44ef-9992-30747399a488"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""377bd0ec-97d0-468b-8546-abf882923e42"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swimming"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""78bb3550-e741-4d69-8035-6d13413fdb4f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Swimming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""52acfc97-5e67-4453-ac5b-c86ad762c235"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Swimming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db047f85-000a-4bff-a3b0-0e0bf7852114"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Swimming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e641b7de-4daa-4a11-9c04-9475e32706db"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Swimming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerGround
        m_PlayerGround = asset.FindActionMap("PlayerGround", throwIfNotFound: true);
        m_PlayerGround_Jump = m_PlayerGround.FindAction("Jump", throwIfNotFound: true);
        m_PlayerGround_Movement = m_PlayerGround.FindAction("Movement", throwIfNotFound: true);
        // PlayerWater
        m_PlayerWater = asset.FindActionMap("PlayerWater", throwIfNotFound: true);
        m_PlayerWater_Swimming = m_PlayerWater.FindAction("Swimming", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerGround
    private readonly InputActionMap m_PlayerGround;
    private IPlayerGroundActions m_PlayerGroundActionsCallbackInterface;
    private readonly InputAction m_PlayerGround_Jump;
    private readonly InputAction m_PlayerGround_Movement;
    public struct PlayerGroundActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerGroundActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerGround_Jump;
        public InputAction @Movement => m_Wrapper.m_PlayerGround_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGround; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGroundActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerGroundActions instance)
        {
            if (m_Wrapper.m_PlayerGroundActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerGroundActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerGroundActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerGroundActionsCallbackInterface.OnJump;
                @Movement.started -= m_Wrapper.m_PlayerGroundActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerGroundActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerGroundActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerGroundActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerGroundActions @PlayerGround => new PlayerGroundActions(this);

    // PlayerWater
    private readonly InputActionMap m_PlayerWater;
    private IPlayerWaterActions m_PlayerWaterActionsCallbackInterface;
    private readonly InputAction m_PlayerWater_Swimming;
    public struct PlayerWaterActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerWaterActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swimming => m_Wrapper.m_PlayerWater_Swimming;
        public InputActionMap Get() { return m_Wrapper.m_PlayerWater; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerWaterActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerWaterActions instance)
        {
            if (m_Wrapper.m_PlayerWaterActionsCallbackInterface != null)
            {
                @Swimming.started -= m_Wrapper.m_PlayerWaterActionsCallbackInterface.OnSwimming;
                @Swimming.performed -= m_Wrapper.m_PlayerWaterActionsCallbackInterface.OnSwimming;
                @Swimming.canceled -= m_Wrapper.m_PlayerWaterActionsCallbackInterface.OnSwimming;
            }
            m_Wrapper.m_PlayerWaterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Swimming.started += instance.OnSwimming;
                @Swimming.performed += instance.OnSwimming;
                @Swimming.canceled += instance.OnSwimming;
            }
        }
    }
    public PlayerWaterActions @PlayerWater => new PlayerWaterActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerGroundActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerWaterActions
    {
        void OnSwimming(InputAction.CallbackContext context);
    }
}
